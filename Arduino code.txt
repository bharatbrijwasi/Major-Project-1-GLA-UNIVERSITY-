#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme;


#include <DHT.h>    // Install DHT11 Library and Adafruit Unified Sensor Library

#define DHTTYPE DHT11 //--> Defines the type of DHT sensor used (DHT11, DHT21, and DHT22), in this project the sensor used is DHT11.

 
#define DHTPIN D4    // Connect Data pin of DHT to D4
int sensorPin = A0;
#define DHTTYPE    DHT11
DHT dht(DHTPIN, DHTTYPE);


//----------------------------------------SSID and Password of your WiFi router.
const char* WIFI_SSID = "Bharat"; //--> Your wifi name or SSID.
const char* WIFI_PASSWORD = "root909090"; //--> Your wifi password.
//----------------------------------------


//----------------------------------------Host & httpsPort
const char* host = "script.google.com";
const int httpsPort = 443;
//----------------------------------------



//----------------------------------------

WiFiClientSecure client; //--> Create a WiFiClientSecure object.

String GAS_ID = "AKfycbxe6Srpro7T4V4v5uC8gtHVklFnZ5JIOyvq2GxRQlfR2Qi0sROX10accw4EV6nmtafw_A"; //--> spreadsheet script ID
 //https://script.google.com/macros/s/AKfycbxe6Srpro7T4V4v5uC8gtHVklFnZ5JIOyvq2GxRQlfR2Qi0sROX10accw4EV6nmtafw_A/exec
//============================================================================== void setup
void setup()
{
  Serial.begin(9600);
  delay(500);

  bme.begin(0x76);   
  dht.begin();  //--> Start reading DHT11 sensors
  delay(500);

 
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  
  client.setInsecure();
}

void loop()
{ 
  
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  int r = analogRead(sensorPin);
  r = constrain(r, 150,440);
  r = map(r, 150,440,1023,0);

  float bT = bme.readTemperature();
  float bH = bme.readHumidity();
  float pressure = bme.readPressure() / 100.0F;
  float altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
 

 
//checks if any reads failed and exit early 
  if(isnan(h) || isnan(t) || isnan(r))
  {
      Serial.println(F("Failed to read from sensors data!"));
    return;
  }

  Serial.println(F("Humidity:"));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("rainFallValue: "));
  Serial.print(r);

 
  sendData(t, h, r, bT, bH, pressure, altitude);
}

void sendData(float temp, float humi, int rainFall, float bTemp, float bHumi, float bPressure, float bAlti)
{
  Serial.println("==========");
  Serial.print("connecting to ");
  Serial.println(host);

  //----------------------------------------Connect to Google host
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }
  
  
  //----------------------------------------Processing data and sending data
  String string_temp = String(temp);
  String string_humi = String(humi, DEC);
  String string_rainFall = String(rainFall);
  String string_bmeTemp = String(bTemp);
  String string_bmeHumi = String(bHumi);
  String string_bmePressure = String(bPressure);
  String string_bmeAltitude = String(bAlti);
  String url = "/macros/s/" + GAS_ID + "/exec?temperature=" +string_temp+ "&humidity=" +string_humi+ "&rainFallValue=" +string_rainFall+ "&bTemp=" +string_bmeTemp+ "&bHumi=" +string_bmeHumi+ "&pressure=" +string_bmePressure+ "&altitude=" +string_bmeAltitude;
  Serial.print("requesting URL: ");
  Serial.println(url);

 client.print(String("GET ") + url + " HTTP/1.1\r\n" +
         "Host: " + host + "\r\n" +
         "User-Agent: BuildFailureDetectorESP8266\r\n" +
         "Connection: close\r\n\r\n");

  Serial.println("request sent");
  //----------------------------------------

  //----------------------------------------Checking whether the data was sent successfully or not
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      Serial.println("headers received");
      break;
    }
  }
  String line = client.readStringUntil('\n');
  if (line.startsWith("{\"state\":\"success\"")) {
    Serial.println("esp8266/Arduino CI successfull!");
  } else {
    Serial.println("esp8266/Arduino CI has failed");
  }
  Serial.print("reply was : ");
  Serial.println(line);
  Serial.println("closing connection");
  Serial.println("==========");
  Serial.println();
  //---------------------------------------- 
}